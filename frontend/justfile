set dotenv-load := false

COLOR := "\\033[0;32m"
NO_COLOR := "\\033[0m"

# Show all available recipes
@_default:
    printf "\n{{ COLOR }}# Frontend (path: \`frontend/\`)\n"
    printf "=============================={{ NO_COLOR }}\n"
    just --list --unsorted


###########
# Version #
###########

export FRONTEND_NODE_VERSION := `grep "volta" -A 1 ../package.json | tail -n 1 | awk -F'[:"]' '{print $5}' | cut -d. -f1`
export FRONTEND_PNPM_VERSION := `grep 'packageManager' ../package.json | awk -F'@' '{print $2}' | sed 's/",//g'`

# Print the Node.js version specified in `package.json`
@node-version:
    echo $FRONTEND_NODE_VERSION

# Print the pnpm version specified in `package.json`
@pnpm-version:
    echo $FRONTEND_PNPM_VERSION

##########
# Docker #
##########

# This section exists because the frontend is not a part of the Docker-based setup
# and cannot be built easily like `just dc build <service>`.

# Build the frontend Docker image
build-img tag="openverse-frontend:local" target="app":
    docker build \
      --target {{ target }} \
      --build-context 'repo_root=..' \
      --build-arg FRONTEND_NODE_VERSION=$(just node-version) \
      --build-arg FRONTEND_PNPM_VERSION=$(just pnpm-version) \
      --tag {{ tag }} \
      .

# Run the frontend Docker image
run-img tag="openverse-frontend:local":
    docker run \
      --rm \
      --publish 8443:8443 \
      {{ tag }}

# Build and push frontend images to `nuxt-preview` tag. Part of temporary utilities for Nuxt 3 iteration. You must `docker login ghcr.io` beforehand.
push-to-nuxt-preview github_username:
    just build-img ghcr.io/wordpress/openverse-frontend:nuxt-preview
    docker build -t ghcr.io/wordpress/openverse-frontend_nginx:nuxt-preview -f ./Dockerfile.nginx .
    docker push ghcr.io/wordpress/openverse-frontend:nuxt-preview
    docker push ghcr.io/wordpress/openverse-frontend_nginx:nuxt-preview
    gh workflow run -R WordPress/openverse-infrastructure 'Deployment - staging-nuxt-preview' -f tag=nuxt-preview

######
# Up #
######

# Bring up services specific to the frontend profile
up *flags:
    env COMPOSE_PROFILES="frontend" just ../up {{ flags }}

# Wait for all profile services to be up
wait-up: up
    just wait

# Set up user and test site in Plausible
init: wait-up
    cd .. && ./setup_plausible.sh

# Run a package.json script via pnpm
run *args:
    pnpm run {{ args }}

# Generate the specified kind of documentation
generate-docs doc="media-props" fail_on_diff="true":
    #!/bin/bash
    set -e
    if [ "{{ doc }}" == "media-props" ]; then
        FINAL_FILE="documentation/meta/media_properties/frontend.md"
        NAME="Media properties"
        just run doc:media-props
        mv media_properties.md ../$FINAL_FILE
    else
        echo "Invalid documentation type specified, use \`media-props\`. Exiting."
        exit 1
    fi
    echo -n "Running linting..."
    just ../lint prettier $FINAL_FILE &>/dev/null || true
    echo "Done!"
    if {{ fail_on_diff }}; then
      set +e
      git diff --exit-code ../$FINAL_FILE
      if [ $? -ne 0 ]; then
          printf "\n\n\e[31m!! Changes found in $NAME documentation, please run 'just frontend/generate-docs {{ doc }}' locally and commit difference !!\n\n"
          exit 1
      fi
    fi

types:
    cd .. && pnpm exec vue-tsc -p frontend --noEmit

##########
# Health #
##########

# Check the health of the service
@plausible-health host="localhost:50288":
    -curl -s 'http://localhost:50288/api/health' --fail | grep -v -c 'error'

# Wait for the service to be healthy
@wait host="localhost:50288":
    # The just command on the second line is executed in the context of the
    # parent directory and so must be prefixed with `frontend/`.
    just ../_loop \
    '"$(just frontend/plausible-health {{ host }})" != "1" ' \
    "Waiting for Plausible to be healthy..."
